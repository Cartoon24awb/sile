#!@LUA@

-- globals used only in core/packagemanager, soon to be deprecated
SYSTEM_SILE_PATH = "@SILE_PATH@"
SHARED_LIB_EXT = "@SHARED_LIB_EXT@"

local executable, extendPaths = require("core.pathsetup")

-- This global is set here and *also* in the core library, since this
-- effectively passes the same table they are interchangeable (for now).
SILE = require("core.sile")

io.stdout:setvbuf 'no'

SILE.cli:parseArguments()

if not os.getenv 'LUA_REPL_RLWRAP' and not SILE.quiet then
  io.stderr:write(SILE.full_version .. '\n')
end

local ProFi
if SU.debugging("profile") then
  ProFi = require("ProFi")
end

if SILE.makeDeps then
  SILE.makeDeps:add(executable)
end

SILE.init()

if SILE.masterFilename then

  if SILE.masterDir:len() >= 1 then
    extendPaths(SILE.masterDir)
  end

  if SU.debugging("profile") then
    ProFi:start()
  end

  -- Deprecated, notice given in core.cli when argument used
  for _, path in ipairs(SILE.input.includes) do
    if not SILE.quiet then
      io.stderr:write("Loading "..path.."\n")
    end
    local c = SILE.resolveFile(path, "classes")
    if c then
      SILE.processFile(c)
    else
      SILE.require(path, "classes")
    end
  end

  for _, spec in ipairs(SILE.input.uses) do
    SILE.use(spec.module, spec.options)
  end

  local main, err = xpcall(function()
    return SILE.processFile(SILE.input.filename)
  end, SILE.errorHandler)

  if not main then
    if type(err) == "string" and err:match(": interrupted!") then
      SILE.outputter:finish()
    else
      io.stderr:write("\nerror summary:\n\t" .. tostring(err) .. "\n")
    end
    os.exit(1)
  end

  SILE.finish()

  if SU.debugging("profile") then
    ProFi:stop()
    ProFi:writeReport(SILE.masterFilename..'.profile.txt')
  end

  if SU.debugging("versions") then
    SILE.shaper:debugVersions()
  end

else
  SILE.repl:enter()
end

-- vim: ft=lua

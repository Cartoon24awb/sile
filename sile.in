#!@LUA@

-- globals used only in core/packagemanager, soon to be deprecated
SYSTEM_SILE_PATH = "@SILE_PATH@"
SHARED_LIB_EXT = "@SHARED_LIB_EXT@"

local executable = debug.getinfo(1, "S").short_src
local luaversion = _VERSION:match("%d+%.%d+")

local extendPath = function (path, ours)
  package.cpath = path .. "/?.@SHARED_LIB_EXT@;" .. package.cpath
  if ours then
    if "@SYSTEM_LUAROCKS_FALSE@" == "" then -- see ./configure --with[out]-system-luarocks
      package.cpath = path .. '/lua_modules/lib/lua/' .. luaversion .. '/?.@SHARED_LIB_EXT@;' .. package.cpath
      package.path  = path .. '/lua_modules/share/lua/' .. luaversion .. '/?/init.lua;' .. package.path
      package.path  = path .. '/lua_modules/share/lua/' .. luaversion .. '/?.lua;' .. package.path
    end
    package.path  = path .. "/lua-libraries/?/init.lua;" .. package.path
    package.path  = path .. "/lua-libraries/?.lua;" .. package.path
  else
    package.path  = path .. "/sile/?/init.lua;" .. package.path
    package.path  = path .. "/sile/?.lua;" .. package.path
  end
  package.path  = path .. "/?/init.lua;" .. package.path
  package.path  = path .. "/?.lua;" .. package.path
end

-- Facilitate loading SILE classes & packages from system LuaRocks
-- Also weed out CWD relative paths, we add them in a different order later
local newpath = {}
for path in package.path:gmatch("[^;]+") do
  if not path:match("^./") and path:len() >= 1 then
    table.insert(newpath, tostring(path:gsub("?", "sile/?")))
    table.insert(newpath, path)
  end
end
package.path = ""

extendPath("@SILE_PATH@", true)
extendPath("@SILE_LIB_PATH@", true)

package.path = table.concat(newpath, ";") .. ";" .. package.path

local pathvar = os.getenv("SILE_PATH")
if pathvar then
  for path in string.gmatch(pathvar, "[^;]+") do
    if not path:match("^./") and path:len() >= 1 then
      extendPath(path)
    end
  end
end

local cwd = executable:gsub("(.*/)(.*)", "%1")
if cwd ~= "./" then extendPath(cwd, true) end
extendPath(".")

SILE = require("core.sile")

io.stdout:setvbuf 'no'

SILE.parseArguments()

if not os.getenv 'LUA_REPL_RLWRAP' then
  io.stderr:write(SILE.full_version .. '\n')
end

local ProFi
if SU.debugging("profile") then
  ProFi = require("ProFi")
end

if SILE.makeDeps then
  SILE.makeDeps:add(executable)
end

SILE.init()

if SILE.masterFilename then

  extendPath(SILE.masterDir)

  if SU.debugging("profile") then
    ProFi:start()
  end

  for _, preamble in pairs(SILE.preamble) do
    io.stderr:write("Loading "..preamble.."\n")
    local c = SILE.resolveFile(preamble, "classes")
    if c then
      SILE.readFile(c)
    else
      SILE.require(preamble, "classes")
    end
  end

  local main, err = xpcall(function()
      return SILE.readFile(SILE.inputFile)
    end, SILE.errorHandler)

  if not main then
    if type(err) == "string" and err:match(": interrupted!") then
      SILE.outputter:finish()
    else
      io.stderr:write("\nError detected:\n\t"..err.."\n")
    end
    os.exit(1)
  end

  SILE.finish()

  if SU.debugging("profile") then
    ProFi:stop()
    ProFi:writeReport(SILE.masterFilename..'.profile.txt')
  end

  if SU.debugging("versions") then
    SILE.shaper.debugVersions()
  end

else
  SILE.repl()
end

-- vim: ft=lua

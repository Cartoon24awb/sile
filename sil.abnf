; Formal grammar definition for SIL (SILE Input Language) files
;
; Based on RFC 5234 (Augmented BNF for Syntax Specifications: ABNF)
; Uses RFC 7405 (Case-Sensitive String Support in ABNF)

; NOTE: ABNF does not seem to have a way to express matching / balancing of
; tags. The grammar below does not express SILE's ability to skip over
; passthrough content until it hits the correct matching closing tag for
; environments or the first unballanced brace for braced content.

; A master document can only have one top level content item, but we allow
; loading of fragments as well which can have any number of top level content
; items, hence valid grammar can be any number of content items.
document = *content

; Top level content can be any sequence of these things
content =  environment
content =/ comment
content =/ text
content =/ braced-content
content =/ command

; Environments come in two flavors, passthrough (raw) and regular. The
; difference is what is allowed to terminate them and what escapes are needed
; for the content in the middle.
environment =  %s"\begin" [ options ] "{" passthrough-command-id "}"
               env-passthrough-text
               %s"\end{" passthrough-command-id "}"
environment =/ %s"\begin" [ options ] "{" command-id "}"
               content
               %s"\end{" command-id "}"

; Passthrough (raw) environments can have any valid UTF-8 except the closing
; delimiter matching the opening, per the environment rule.
env-passthrough-text = utf8-text

; Nothing to see here.
; But potentially important because it eats newlines!
comment = "%" utf8-text CRLF

; Input strings that are not special
text = *( text-char / escaped-specials )

; Input content wrapped in braces can be attatched to a command or used to
; manually isolate chunks of content (e.g. to hinder ligatures).
braced-content = "{" content "}"

; As with environments, the content format may be passthrough (raw) or more sil
; content depending on the command.
command =  "\" passthrough-command-id [ options ] [ braced-passthrough-text ]
command =/ "\" command-id [ options ] [ braced-content ]

; Passthrough (raw) command text can have any valid UTF-8 except an unbalanced closing delimiter
braced-passthrough-text = utf8-text

; Building blocks
options = "[" parameter *( "," parameter ) "]"
parameter = *WSP sil-identifier *WSP "=" *WSP ( value / quoted-value ) *WSP
value = utf8-text
quoted-value = DQUOTE utf8-text DQUOTE

specials = "\" / "%" / "{" / "}"
escaped-specials = "\" specials

; non-ascii-char = %x80-D7FF / %xE000-10FFFF
text-char =  %x0-24  ; omit %
text-char =/ %x26-5B ; omit \
text-char =/ %x5D-7A ; omit {
text-char =/ %x7C    ; omit }
text-char =/ %x7E-7F ; end of utf8-1
text-char =/ utf8-2
text-char =/ utf8-3
text-char =/ utf8-4

letter = ALPHA / "_" / ":"
identifier = letter *( letter / DIGIT / "-" / "." )
command-id = identifier ; - ( %s"begin" / %s"end" / passthrough-command-id )
passthrough-command-id = %s"ftl" / %s"lua" / %s"math" / %s"raw" / %s"script" / %s"sil" / %s"use" / %s"xml"

; ASCII isn't good enough for us.
utf8-text = *utf8-char
utf8-char   = utf8-1 / utf8-2 / utf8-3 / utf8-4
utf8-1      = %x00-7F
utf8-2      = %xC2-DF utf8-tail
utf8-3      = %xE0 %xA0-BF utf8-tail / %xE1-EC 2utf8-tail / %xED %x80-9F utf8-tail / %xEE-EF 2utf8-tail
utf8-4      = %xF0 %x90-BF 2utf8-tail / %xF1-F3 3utf8-tail / %xF4 %x80-8F 2utf8-tail
utf8-tail   = %x80-BF
